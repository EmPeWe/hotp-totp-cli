#!/usr/bin/env node
var argv = process.argv.slice( 2 )

var USAGE = `
Usage: hotp [options] <key>

Options:

  -c, --counter      Counter value to calculate the passcode for
  -a, --algorithm    HMAC algorithm to use (Default: sha1)
  -d, --digits       Number of passcode digits to generate [6-10] (Default: 6)

  -h, --help
  -v, --version
`

if( argv.includes( '-h' ) || argv.includes( '--help' ) ) {
  console.log( USAGE )
  process.exit( 0 )
}

if( argv.includes( '--version' ) ) {
  console.log( require( '../package.json' ).version )
  process.exit( 0 )
}

var hotp = require( 'hotp' )
var parseKey = require( '../lib/parse-key' )
var getAlgorithm = require( '../lib/get-algorithm' )

function getOptions( argv ) {

  var opt = { _: [] }
  var part = null

  while( part = argv.shift() ) {
    if( part == '-d' || part == '--digits' ) {
      opt.digits = +argv.shift()
    } else if( part == '-a' || part == '--algorithm' ) {
      opt.algorithm = argv.shift()
    } else if( part == '-c' || part == '--counter' ) {
      opt.counter = argv.shift()
    } else {
      opt._.push( part )
    }
  }

  return opt

}

var options = getOptions( argv )
var key = options._.shift()

// CLI options override key URI options
options = Object.assign( parseKey( key ), options )

if( !key || !isFinite( options.counter ) ) {
  console.error( '\n[ERROR]', 'Key or counter value missing' )
  console.error( USAGE )
  process.exit( 1 )
}

// Normalize hash algorithm identifier,
// and check if the platform supports it
options.algorithm = getAlgorithm( options.algorithm )

console.log( hotp( options.key, options.counter, options ) )
